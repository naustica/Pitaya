var documenterSearchIndex = {"docs":
[{"location":"","page":"API reference","title":"API reference","text":"CurrentModule = Pitaya","category":"page"},{"location":"#Pitaya","page":"API reference","title":"Pitaya","text":"","category":"section"},{"location":"","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"","page":"API reference","title":"API reference","text":"Modules = [Pitaya]","category":"page"},{"location":"#Pitaya.agency-Tuple{String}","page":"API reference","title":"Pitaya.agency","text":"agency(doi)\n\nArguments:\n\ndoi::String: DOI of the work.\n\nReturns:\n\nDict\n\n\n\n\n\n","category":"method"},{"location":"#Pitaya.funders-Tuple{}","page":"API reference","title":"Pitaya.funders","text":"funders(; kwargs...)\n\nArguments:\n\nfunder_id::Union{Nothing, String}: ID of a funder.\nquery::Union{Nothing, String}: A query string.\nfilter::Union{Nothing, Dict{String, String}}: Filter options.\noffset::Union{Nothing, Int}: Number of record to start at.\nlimit::Union{Nothing, Int}: Number of results to return.\nsample::Union{Nothing, Int}: Number of random results to return.\nsort::Union{Nothing, String}: Field to sort on.\norder::Union{Nothing, String}: Sort order, one of ‘asc’ or ‘desc’.\nfacet::Union{Nothing, Dict{String, Int}}: Facet options.\nselect::Union{Nothing, String}: Select specific fields.\nworks::Bool: If true, works returned as well.\ncursor::Union{Nothing, String}: Cursor character string to do deep paging.\n\nReturns:\n\nDict\n\n\n\n\n\n","category":"method"},{"location":"#Pitaya.journals-Tuple{}","page":"API reference","title":"Pitaya.journals","text":"journals(; kwargs...)\n\nArguments:\n\nissn::Union{Nothing, String}: A issn of a journal.\nquery::Union{Nothing, String}: A query string.\nfilter::Union{Nothing, Dict{String, String}}: Filter options.\noffset::Union{Nothing, Int}: Number of record to start at.\nlimit::Union{Nothing, Int}: Number of results to return.\nsample::Union{Nothing, Int}: Number of random results to return.\nsort::Union{Nothing, String}: Field to sort on.\norder::Union{Nothing, String}: Sort order, one of ‘asc’ or ‘desc’.\nfacet::Union{Nothing, Dict{String, Int}}: Facet options.\nselect::Union{Nothing, String}: Select specific fields.\nworks::Bool: If true, works returned as well.\ncursor::Union{Nothing, String}: Cursor character string to do deep paging.\n\nReturns:\n\nDict\n\n\n\n\n\n","category":"method"},{"location":"#Pitaya.licenses-Tuple{}","page":"API reference","title":"Pitaya.licenses","text":"licenses(; kwargs...)\n\nArguments:\n\nquery::Union{Nothing, String}: A query string.\noffset::Union{Nothing, Int}: Number of record to start at.\nlimit::Union{Nothing, Int}: Number of results to return.\nsample::Union{Nothing, Int}: Number of random results to return.\nsort::Union{Nothing, String}: Field to sort on.\norder::Union{Nothing, String}: Sort order, one of ‘asc’ or ‘desc’.\nfacet::Union{Nothing, Dict{String, Int}}: Facet options.\n\nReturns:\n\nDict\n\n\n\n\n\n","category":"method"},{"location":"#Pitaya.members-Tuple{}","page":"API reference","title":"Pitaya.members","text":"members(; kwargs...)\n\nArguments:\n\nmember_id::Union{Nothing, Int}: ID of a Crossref member.\nquery::Union{Nothing, String}: A query string.\nfilter::Union{Nothing, Dict{String, String}}: Filter options.\noffset::Union{Nothing, Int}: Number of record to start at.\nlimit::Union{Nothing, Int}: Number of results to return.\nsample::Union{Nothing, Int}: Number of random results to return.\nsort::Union{Nothing, String}: Field to sort on.\norder::Union{Nothing, String}: Sort order, one of ‘asc’ or ‘desc’.\nfacet::Union{Nothing, Dict{String, Int}}: Facet options.\nselect::Union{Nothing, String}: Select specific fields.\nworks::Bool: If true, works returned as well.\ncursor::Union{Nothing, String}: Cursor character string to do deep paging.\n\nReturns:\n\nDict\n\n\n\n\n\n","category":"method"},{"location":"#Pitaya.prefixes-Tuple{}","page":"API reference","title":"Pitaya.prefixes","text":"prefixes(; kwargs...)\n\nArguments:\n\nowner_prefix::Union{Nothing, String}: A DOI owner prefix.\nquery::Union{Nothing, String}: A query string.\nfilter::Union{Nothing, Dict{String, String}}: Filter options.\noffset::Union{Nothing, Int}: Number of record to start at.\nlimit::Union{Nothing, Int}: Number of results to return.\nsample::Union{Nothing, Int}: Number of random results to return.\nsort::Union{Nothing, String}: Field to sort on.\norder::Union{Nothing, String}: Sort order, one of ‘asc’ or ‘desc’.\nfacet::Union{Nothing, Dict{String, Int}}: Facet options.\nselect::Union{Nothing, String}: Select specific fields.\nworks::Bool: If true, works returned as well.\ncursor::Union{Nothing, String}: Cursor character string to do deep paging.\n\nReturns:\n\nDict\n\n\n\n\n\n","category":"method"},{"location":"#Pitaya.types-Tuple{}","page":"API reference","title":"Pitaya.types","text":"types(; kwargs...)\n\nArguments:\n\ntype_id::Union{Nothing, String}: ID of a metadata work type.\nquery::Union{Nothing, String}: A query string.\nfilter::Union{Nothing, Dict{String, String}}: Filter options.\noffset::Union{Nothing, Int}: Number of record to start at.\nlimit::Union{Nothing, Int}: Number of results to return.\nsample::Union{Nothing, Int}: Number of random results to return.\nsort::Union{Nothing, String}: Field to sort on.\norder::Union{Nothing, String}: Sort order, one of ‘asc’ or ‘desc’.\nfacet::Union{Nothing, Dict{String, Int}}: Facet options.\nselect::Union{Nothing, String}: Select specific fields.\nworks::Bool: If true, works returned as well.\ncursor::Union{Nothing, String}: Cursor character string to do deep paging.\n\nReturns:\n\nDict\n\n\n\n\n\n","category":"method"},{"location":"#Pitaya.works-Tuple{}","page":"API reference","title":"Pitaya.works","text":"works(; kwargs...)\n\nArguments:\n\ndoi::Union{Nothing, String}: DOI of the work.\nquery::Union{Nothing, String}: A query string.\nfilter::Union{Nothing, Dict{String, String}}: Filter options.\noffset::Union{Nothing, Int}: Number of record to start at.\nlimit::Union{Nothing, Int}: Number of results to return.\nsample::Union{Nothing, Int}: Number of random results to return.\nsort::Union{Nothing, String}: Field to sort on.\norder::Union{Nothing, String}: Sort order, one of ‘asc’ or ‘desc’.\nfacet::Union{Nothing, Dict{String, Int}}: Facet options.\nselect::Union{Nothing, String}: Select specific fields.\ncursor::Union{Nothing, String}: Cursor character string to do deep paging.\n\nReturns:\n\nDict\n\n\n\n\n\n","category":"method"}]
}
